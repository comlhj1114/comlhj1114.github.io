{"componentChunkName":"component---src-templates-blog-post-js","path":"/알고리즘/practice_002/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Hoon's Blog"}},"markdownRemark":{"id":"6268e97c-09a5-5005-aabc-342364f08567","excerpt":"연습문제 #2 프로그래밍 경진대회 출처: https://www.codeground.org/practice 문제 삼성 프로그래밍 경진대회는 권위 있는 대회이다. 대회는 여러 라운드를 통해서 진행되며, 모든 라운드에 총 N명의 응시자가 있다.\n각 라운드 별로 1등은 N점, 2등은 N−…","html":"<h1>연습문제 #2 프로그래밍 경진대회</h1>\n<p>출처: <a href=\"https://www.codeground.org/practice\">https://www.codeground.org/practice</a></p>\n<h2>문제</h2>\n<p>삼성 프로그래밍 경진대회는 권위 있는 대회이다. 대회는 여러 라운드를 통해서 진행되며, 모든 라운드에 총 N명의 응시자가 있다.\n각 라운드 별로 1등은 N점, 2등은 N−1점 순으로 순차적으로 점수를 얻게 되고 뒤에서 2등은 2점, 뒤에서 1등은 1점을 얻게 된다.\n그리고 각 라운드 별로 동점자는 없으며, 각 라운드 마다 받은 점수의 합이 제일 높은 사람이 우승하게 된다.\n마지막 라운드 직전까지의 점수 합이 주어졌을 때, 우승할 가능성이 있는 응시자의 수를 구하는 프로그램을 작성하시오.\n(SCPC 실제 대회 규칙과는 관련이 없습니다.)</p>\n<h4>입력</h4>\n<p>입력 파일에는 여러 테스트 케이스가 포함될 수 있다.\n파일의 첫째 줄에 케이스의 개수 T가 주어지고, 후 차례로 T개 테스트 케이스가 주어진다. (1≤T≤5)\n각각의 테스트 케이스의 첫 줄에는 응시자의 수 N이 주어지며 (1≤N≤300,000), 다음 N개의 줄에는 각 응시자가 마지막 라운드 전까지 받은 점수의 합을 나타내는 N개의 자연수가 한 줄에 하나씩 주어진다.\n(여기서 점수 합은 2,000,000을 넘지 않는 음이 아닌 정수이다.)</p>\n<h4>출력</h4>\n<p>각 테스트 케이스의 답을 순서대로 표준출력으로 출력하여야 하며, 각 테스트 케이스마다 첫 줄에 “Case #T”를 출력하여야 한다. 이때 T는 케이스의 번호이다.\n각 케이스에 대해서 우승할 가능성이 있는 응시자의 수를 출력한다.</p>\n<h4>입출력예</h4>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>출력</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 <br/>3 <br/>5 <br/>7 <br/>6</td>\n<td>Case #1 <br/> 3</td>\n</tr>\n</tbody>\n</table>\n<h2>풀이</h2>\n<p>연습문제 1번과 마찬가지로 자료구조와 알고리즘을 몰라도 풀 수 있는 문제이다. 아, 정렬은 알고 있어야 하는데, 직접 구현하지 않아도 내장된 라이브러리를 써도 되니까 큰 지장은 없다.</p>\n<p>가장 중요한 부분은 우승할 가능성을 판단 하는 부분인데, 이 부분은 시간을 가지고 잠시 고민 해 보자.</p>\n<p>먼저 우승할 가능성이 없는 사람들은 현재 점수가 너무 낮아서 다음 라운드에서 최고점을 받아도 1등 할 가능성이 없는 사람들이다. 그러면 다음라운드에서 1등을 할 가능성은 어떻게 알 수 있을까? 여기서 중요한 것은 <strong>가능성</strong> 이기 때문에 극단의 경우를 생각하여야 한다는 점이다.</p>\n<p>다음 라운드에서 1등을 하기 위한 점수는 어떻게 구할 수 있을까? 단순히 생각하면 현재 1등이 다음 라운드에서 꼴지를 하는 경우의 점수를 기준으로 삼을 수 있겠다. 현재 1등의 점수를 x라고 하면, x+1점을 다음 라운드에서 우승 할 가능성이 있는 사람의 점수로 생각하는 것이다. 하지만, 이 경우는 현재 공동 1등이 존재 할 경우에 점수를 바르게 예측하지 못한다. 왜냐하면 공동 1등이 존재 할 경우, 다음 라운드에서 x+2점이 존재 할 수 밖에 없으므로, x+1점은 적절한 기준점이 되지 못한다.</p>\n<p>따라서 정확하게 우승 할 수 있는 사람의 기준점을 구하려면, 다음라운드에서 모든 참가자의 점수를 고려하였을 때의 최고점을 기준으로 삼아야한다. 이 경우는 참가자들이 현재 순위의 역순위로 점수를 받게 되는 경우이다. 1등은 1점, 2등은 2점, … N등은 N점을 받았을 경우의 최고점을 우승하기 위해 다음 라운드에서 성취해야 하는 점수로 보는 것이다.</p>\n<p>따라서, 1) 현재 순위를 계산하고, 2) 현재 순위에 따라서 다음 라운드에 받을 수 있는 최하점을 더한 후, 3) 그 점수중 최고점을 우승하기 위한 기준점으로 삼는다. 마지막으로 현재 점수에서 다음라운드에 최고점을 받았을 경우, 기준점을 넘을 수 있는 사람의 수가 정답이 된다.</p>\n<h2>코드</h2>\n<ol>\n<li>현재 순위를 구한다. (정렬) <br/></li>\n<li>현재 순위만큼 점수를 더한다. (n등은 n점 획득) <br/></li>\n<li>2)에서 계산한 점수 중 최고점이 우승하기 위한 기준점이 된다. <br/></li>\n<li>다음라운드에 최고점(N점)을 받을 경우 3)에서 구한 기준점이 넘는 사람의 수를 구한다.</li>\n</ol>\n<h3>C</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\">// https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> test_case<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> win_score<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">300000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>test_case <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> test_case <span class=\"token operator\">&lt;=</span>T<span class=\"token punctuation\">;</span> test_case<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tres<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\twin_score<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>score<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token comment\">// 1) 현재 순위를 구한다. (정렬)</span>\n\t\t<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token comment\">// 2) 현재 순위만큼 점수를 더한 뒤에,</span>\n\t\t    <span class=\"token comment\">// 3) 우승하기 위한 기준점을 구한다. (최대값)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">></span>win_score<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\twin_score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token comment\">// 4) 다음라운드에 N점을 받을 경우 기준점을 넘는 사람수를 구한다.</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>N <span class=\"token operator\">>=</span> win_score<span class=\"token punctuation\">)</span>\n\t\t\t\tres<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case #%d\\n\"</span><span class=\"token punctuation\">,</span> test_case<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>C++</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">// 코드그라운드로 알고리즘 공부하기\n// https://github.com/DaksHoont/CodeGround\n\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint Answer;\n\nbool comp(int a, int b)\n{\n    return a&gt;b;\n}\n\nint main(int argc, char** argv)\n{\n\tint T, test_case;\n\t\n\tcin &gt;&gt; T;\n\tfor(test_case = 0; test_case  &lt; T; test_case++)\n\t{\n        int i,N,next_score,win_score;\n        int score[300000];\n\t\tAnswer = 0;\n\t\twin_score=0;\n\t\t\n\t\tcin &gt;&gt; N;\n\t\tfor(i=0;i&lt;N;i++)\n    \t\tcin &gt;&gt; score[i];\n\t\t\n\t\t// 1) 현재 순위를 구한다. (정렬)\n\t\tsort(score,score+N,comp);\n\t\t\n\t\tfor(i=0;i&lt;N;i++)\n\t\t{\n\t\t    // 2) 현재 순위만큼 점수를 더한다.\n\t\t    next_score = score[i]+i+1;\n\t\t    \n\t\t    // 3) 우승 할 수 있는 기준점을 구한다. (최대값)\n\t\t    if(next_score&gt;win_score)\n\t\t        win_score = next_score;\t\t        \n\t\t}\n\t\t\n\t\tfor(i=0;i&lt;N;i++)\n\t\t{\n\t\t    // 4) 다음 라운드에 최고점(N점)을 받았을 경우 기준점을 넘는 사람수를 구한다.\n\t\t    next_score = score[i]+N;\n\t\t    if(next_score &gt;= win_score)\n\t\t        Answer++;\n\t\t}\n\t\t\n\t\t\n\t\tcout&lt;&lt; &quot;Case #&quot; &lt;&lt; test_case+1 &lt;&lt; endl;\n\t\tcout &lt;&lt; Answer &lt;&lt; endl;\n\t}\n\n\treturn 0;//Your program should return 0 on normal termination.\n}</code></pre></div>\n<h3>Python</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\"># https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token keyword\">import</span> sys\n\ninf <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin \n\nT <span class=\"token operator\">=</span> inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    Answer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    score <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        score<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 1) 현재 등수를 구한다. (정렬)</span>\n    score<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    \n    win_score<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2) 다음 라드운드 최하 점수를 구한다. </span>\n        next_score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        \n        <span class=\"token comment\"># 3) 우승하기 위한 기준점을 구한다. (최고점)</span>\n        <span class=\"token keyword\">if</span> next_score <span class=\"token operator\">></span> win_score<span class=\"token punctuation\">:</span>\n            win_score <span class=\"token operator\">=</span> next_score\n    \n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> score<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 4) 다음라운드에 최고점을 받았을때,  기준점 이상이 될 수 있는 사람수를 구한다.</span>\n        next_score <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>N<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> next_score <span class=\"token operator\">>=</span> win_score<span class=\"token punctuation\">:</span>\n            Answer <span class=\"token operator\">=</span> Answer <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case #%d'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Answer<span class=\"token punctuation\">)</span>\ninf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"slug":"/알고리즘/practice_002/","previous":{"fields":{"slug":"/알고리즘/practice_003/"},"frontmatter":{"title":""}},"next":null}}}