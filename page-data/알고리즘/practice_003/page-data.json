{"componentChunkName":"component---src-templates-blog-post-js","path":"/알고리즘/practice_003/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Hoon's Blog"}},"markdownRemark":{"id":"ada94560-5050-5780-8f14-d42c207141c7","excerpt":"연습문제 #3 시험 공부 출처: https://www.codeground.org/practice 문제 초등학생인 정우는 시험 기간을 맞아 공부를 시작해야 한다.\n정우가 다니는 학교에선 총 N개의 과목에 대해 시험을 보는데, 시간이 부족한 정우는 그 중 K…","html":"<h1>연습문제 #3 시험 공부</h1>\n<p>출처: <a href=\"https://www.codeground.org/practice\">https://www.codeground.org/practice</a></p>\n<h2>문제</h2>\n<p>초등학생인 정우는 시험 기간을 맞아 공부를 시작해야 한다.\n정우가 다니는 학교에선 총 N개의 과목에 대해 시험을 보는데, 시간이 부족한 정우는 그 중 K개의 과목만을 골라서 공부할 수 있다.\n정우는 매우 특이한 학생이라서 어떤 과목을 공부한다면 그 과목에 대해선 무조건 같은 점수를 받게 된다고 한다.\n정우는 시험 점수 총합을 최대화하기 위해 K개의 과목을 골라야 한다.\n하지만, 모든 과목을 공부할 시간이 없는 정우는, 당신에게 “최대 합계 점수”를 받을 수 있는 K개의 과목을 골라달라고 한다.\nK개 과목을 골랐을 때 정우가 받을 수 있는 “최대 합계 점수”를 구하는 프로그램을 작성하라.</p>\n<h4>입력</h4>\n<p>입력 파일에는 여러 테스트 케이스가 포함될 수 있다.\n파일의 첫째 줄에 케이스의 개수를 나타내는 자연수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. (1≤T≤20)\n입력의 첫 줄에는 테스트 케이스의 숫자가 주어진다. 각각의 테스트 케이스의 첫째 줄에는 과목의 수 N (N은 20만 이하의 자연수)과 정우가 공부할 수 있는 과목의 수 K\n가 주어진다.\n테스트 케이스의 둘째 줄에는 N개의 숫자들이 주어진다. 각 숫자는 100이하의 음이 아닌 정수이다.\n그리고, 각 숫자는 차례대로 어떤해당하는 과목을 공부했을 때 정우가 받을 수 있는 점수를 의미한다.</p>\n<h4>출력</h4>\n<p>각 테스트 케이스의 답을 순서대로 표준출력으로 출력하여야 하며, 각 테스트 케이스마다 첫 줄에 “Case #T”를 출력하여야 한다.\n이때 T는 케이스의 번호이다.\n각 테스트케이스 마다 정우가 원하는 결과(K개 과목 총점의 최대값)를 출력한다.</p>\n<h4>입출력예</h4>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>출력</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 <br/> 4 2 <br/>20 50 30 30</td>\n<td>Case #1 <br/> 80</td>\n</tr>\n</tbody>\n</table>\n<h2>풀이</h2>\n<p>문제를 다시 살펴 보면, N개의 숫자 중 K개를 더했을 경우, 최대가 나오는 때의 합을 구하라는 문제이다.\n결국 이 문제는 N개의 숫자를 정렬 한 후에, 가장 큰 숫자 K개의 합을 구하면 된다.\n정렬 알고리즘에도 여러가지가 있지만, 나는 구현되어있는 라이브러리를 사용하는 것이 좋다.</p>\n<h2>코드</h2>\n<ol>\n<li>N개의 숫자를 정렬한다. <br/></li>\n<li>높은 순서대로 K개를 더한다. <br/>\n*) 이번 문제는 너무 간단하니, 메모리 효율성을 위해 동적할당을 연습 해 보자.</li>\n</ol>\n<h3>C</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\">// https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">comp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a_val <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b_val <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> b_val<span class=\"token operator\">-</span>a_val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> score<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        score <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token operator\">+=</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case #%d\\n%d\\n\"</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>C++</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">// 코드그라운드로 알고리즘 공부하기\n// https://github.com/DaksHoont/CodeGround\n\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n    int T,t;\n    \n    cin&gt;&gt;T;\n    for(t=0;t&lt;T;t++)\n    {\n        int N,K,i;\n        vector&lt;int&gt; score;\n        int res=0;\n        \n        cin&gt;&gt;N&gt;&gt;K;\n        for(i=0;i&lt;N;i++)\n        {\n            int temp;\n            cin&gt;&gt;temp;\n            score.push_back(temp);\n        }\n        \n        sort(score.begin(),score.end());\n        \n        for(i=N-1;i&gt;=N-K;i--)\n            res+=score.at(i);\n            \n        cout&lt;&lt;&quot;Case #&quot;&lt;&lt;t+1&lt;&lt;endl\n            &lt;&lt;res&lt;&lt;endl;\n    }\n}</code></pre></div>\n<h3>Python</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\"># https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token keyword\">import</span> sys\n\ninf <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin \n\nT <span class=\"token operator\">=</span> inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    line <span class=\"token operator\">=</span> inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    K <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    line <span class=\"token operator\">=</span> inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    line <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    line<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case #%d'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\ninf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"slug":"/알고리즘/practice_003/","previous":{"fields":{"slug":"/잡담/블로그_시작/"},"frontmatter":{"title":"블로그 시작"}},"next":null}}}