{"componentChunkName":"component---src-templates-blog-post-js","path":"/알고리즘/practice_004/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Hoon's Blog"}},"markdownRemark":{"id":"e05b62eb-4089-591a-ad48-8149510beab8","excerpt":"연습문제 #4 다트 공부 출처: https://www.codeground.org/practice 문제 많은 펍(Pub)에서는 다트를 할 수 있게 다트 판이있다. \n이 다트판의 구성은 다음과같다. ①SINGLE :숫자의점수그대로 \n②DOUBLE :해당점수의두배 \n③TRIPLE…","html":"<h1>연습문제 #4 다트 공부</h1>\n<p>출처: <a href=\"https://www.codeground.org/practice\">https://www.codeground.org/practice</a></p>\n<h2>문제</h2>\n<p>많은 펍(Pub)에서는 다트를 할 수 있게 다트 판이있다.\n이 다트판의 구성은 다음과같다.</p>\n<p>①SINGLE :숫자의점수그대로 <br/>\n②DOUBLE :해당점수의두배 <br/>\n③TRIPLE :해당점수의세배 <br/>\n④OUT BOARD :득점이없는바깥영역 <br/>\n⑤BULL : 50점 <br/></p>\n<p><img src=\"https://cdn.codeground.org/resources/2320e52a0b/AWNoMGlNAAhpX_LD.png\" alt=\"그림 : www.codeground.org/practice\"><br/>\n출처: <a href=\"https://www.codeground.org/practice\">https://www.codeground.org/practice</a></p>\n<p>다트핀이 꽂힌 위치를 쉽게 설명하기 위해, 그림과 같이 다트판의 중심을 원점 (0, 0)으로 생각한 좌표평면으로 옮겨 생각하자.\n오랜만에 펍에 놀러간 대희는 다트를 한판하려고한다.\n다트핀을 N번 던졌을때, 얻은 총 점수를 구하여라.</p>\n<h4>입력</h4>\n<p>입력파일에는여러테스트케이스가포함될수있다.\n파일의첫째줄에케이스의개수를나타내는자연수 T가주어지고, 이후 차례로 T개 테스트케이스가 주어진다. (1≤T≤20)\n각각의 테스트 케이스 첫 번째 줄에는 BULL의 반지름 A, TRIPLE 시작구간의 반지름 B, TRIPLE 종료구간의 반지름 C, DOUBLE 시작구간의 반지름 D, DOUBLE 종료구간의 반지름 E가 각각 순서대로 주어진다. (1≤A&#x3C;B&#x3C;C&#x3C;D&#x3C;E≤20000, A,B,C,D,E는 정수)\n테스트 케이스의 두번째 줄에는 대희가 쏜 다트의 개수 N 이 주어진다. (1 ≤ N ≤ 10000)\n테스트 케이스의 세번째 줄부터 N개의 줄에는 각 다트의 위치를 의미하는 x,y (−30000≤x,y≤30000)가 공백을 사이에 두고 차례로주어진다.\n이는 다트판의 중심을 원점 (0, 0)으로 두었을 때 다트의 위치이다.\n이 때, 다트핀은 절대로 점수 구간의 경계에 꽂히지 않는 다는 것을 보장한다.</p>\n<h4>출력</h4>\n<p>각 테스트 케이스의 답을 순서대로 표준출력으로 출력하여야 하며, 각 테스트 케이스마다 첫 줄에 “Case #T”를 출력하여야 한다.\n이때 T는 케이스의 번호이다.\n그 다음 줄에는 각 테스트케이스에 대해 대희가 다트를 던져 얻은 총 점수를 출력한다.</p>\n<h4>입출력예</h4>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>출력</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 <br/> 10 50 60 80 90 <br/> 5 <br/> 5 5 <br/> 0 55 <br/> 45 -50 <br/> -77 88 <br/> -85 0</td>\n<td>Case #1 <br/> 134</td>\n</tr>\n</tbody>\n</table>\n<h2>풀이</h2>\n<p>이번 문제도 자료구조와 알고리즘의 이해가 없어도 충분히 해결 할 수 있는 문제이다.\n나는 Cartesian 좌표인 (x,y)를 Polar coordinate (극좌표)로 변경하여 문제를 해결하였다. 극좌표로 다트판을 표시하면 직사각형 모양으로 표현 할 수 있다.</p>\n<h2>코드</h2>\n<ol>\n<li>다트판을 극좌표로 변환하여 영역을 나눈다. <br/></li>\n<li>다트가 꽂힌 위치 (x,y)를 극좌표로 변환하여 점수를 계산한다. <br/></li>\n</ol>\n<h3>C</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\">// https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PI 3.141592</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> test_case<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> rb<span class=\"token punctuation\">,</span>rt1<span class=\"token punctuation\">,</span>rt2<span class=\"token punctuation\">,</span>rd1<span class=\"token punctuation\">,</span>rd2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>s_ind<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> r<span class=\"token punctuation\">,</span>theta<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> dart<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>test_case <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> test_case <span class=\"token operator\">&lt;=</span>T<span class=\"token punctuation\">;</span> test_case<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tres<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rb<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rt1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rt2<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rd1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f %f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tscore<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> rd2<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> rb<span class=\"token punctuation\">)</span>\n\t\t\t\t\tscore <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\ttheta <span class=\"token operator\">=</span> <span class=\"token number\">180.0</span><span class=\"token operator\">/</span>PI<span class=\"token operator\">*</span><span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -180도 ~ 180도로 표현 ex) -9도~9도는 6임</span>\n\t\t\t\t\ts_ind <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>theta<span class=\"token operator\">/</span><span class=\"token number\">18.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 배열을 쓰기 위해서 다트의 칸 수 만큼 나누어주고, 음수를 양수로 바꿔줌.  따라서 11점 부터 반 시계 방향으로 인덱스가 만들어짐</span>\n\t\t\t\t\ts_ind <span class=\"token operator\">%=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 마지막 영역 처리</span>\n\t\t\t\t\tscore <span class=\"token operator\">=</span> dart<span class=\"token punctuation\">[</span>s_ind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 점수 계산</span>\n\t\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//\tprintf(\"%f %d %d\\n\",theta,s_ind,score);</span>\n\t\t\t\t\t\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rt1<span class=\"token operator\">&lt;</span>r <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;</span>rt2 <span class=\"token punctuation\">)</span> score<span class=\"token operator\">*=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 트리플 일 경우</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rd1<span class=\"token operator\">&lt;</span>r <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;</span>rd2 <span class=\"token punctuation\">)</span> score<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 더블 일 경우</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tres<span class=\"token operator\">+=</span>score<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case #%d\\n\"</span><span class=\"token punctuation\">,</span> test_case<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>C++</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">// 코드그라운드로 알고리즘 공부하기\n// https://github.com/DaksHoont/CodeGround\n\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\n\nstruct _dart\n{\n    int x;\n    int y;\n};\n\nint A,B,C,D,E;\nint N;\nint res;\n_dart dart[10001];\n\nvoid problem_in()\n{\n    int i,x,y;\n    cin&gt;&gt;A&gt;&gt;B&gt;&gt;C&gt;&gt;D&gt;&gt;E;\n    cin&gt;&gt;N;\n    for(i=0;i&lt;N;i++)\n    {\n        cin&gt;&gt;x&gt;&gt;y;\n        dart[i].x=x;\n        dart[i].y=y;\n    }\n}\n\nvoid problem_out(int T)\n{\n    cout&lt;&lt;&quot;Case #&quot;&lt;&lt;T&lt;&lt;endl\n        &lt;&lt;res&lt;&lt;endl;\n}\n\nvoid solving()\n{\n        int i,x,y;\n        float r,theta;\n        int s_ind;\n        int score[20]={11,8,16,7,19,3,17,2,15,10,6,13,4,18,1,20,5,12,9,14};\n\n        res=0;\n        for(i=0;i&lt;N;i++)\n        {\n            x=dart[i].x;\n            y=dart[i].y;\n\n            r = sqrt(x*x+y*y);\n            theta = atan2(y,x); // 극좌표로 변환\n            s_ind = round((theta*180/3.141592)/18); // 점수 영역을 인덱스로 변환\n            s_ind = (s_ind+10)%20; // 음수를 양수로 바꾸기 (score배열이 11점 부터 시작한 이유)\n\n            if(r&lt;A) res+=50;\n            else if(B&lt;r &amp;&amp; r&lt;C) res+=3*score[s_ind];\n            else if(D&lt;r &amp;&amp; r&lt;E) res+=2*score[s_ind];\n            else if(r&lt;E) res+=score[s_ind];\n        }\n}\n\nint main()\n{\n        setbuf(stdout,NULL);\n\n        int T,it;\n        cin&gt;&gt;T;\n\n        for(it=1;it&lt;=T;it++)\n        {\n            problem_in();\n            solving();\n            problem_out(it);\n        }\n\n        return 0;\n}</code></pre></div>\n<h3>Python</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 코드그라운드로 알고리즘 공부하기</span>\n<span class=\"token comment\"># https://github.com/DaksHoont/CodeGround</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> math\n\ninf <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin \n\nT <span class=\"token operator\">=</span> inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc_score</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>theta<span class=\"token punctuation\">,</span>dart_radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span>\n    \n    s_ind <span class=\"token operator\">=</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>theta<span class=\"token operator\">*</span><span class=\"token number\">180</span><span class=\"token operator\">/</span><span class=\"token number\">3.141592</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n    s_ind <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s_ind<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">20</span>\n    score <span class=\"token operator\">=</span> dart<span class=\"token punctuation\">[</span>s_ind<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">if</span> r<span class=\"token operator\">&lt;</span>dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">50</span>\n        \n    <span class=\"token keyword\">elif</span> dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>r <span class=\"token keyword\">and</span> r<span class=\"token operator\">&lt;</span>dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token operator\">*</span><span class=\"token number\">3</span>\n        \n    <span class=\"token keyword\">elif</span> dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>r <span class=\"token keyword\">and</span> r<span class=\"token operator\">&lt;</span>dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token operator\">*</span><span class=\"token number\">2</span>\n        \n    <span class=\"token keyword\">elif</span> dart_radius<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> score\n    \n\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    dart_radius <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    res<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dart_xy <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>inf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>dart_xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>dart_xy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        theta <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>atan2<span class=\"token punctuation\">(</span>dart_xy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dart_xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> res<span class=\"token operator\">+</span>calc_score<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>theta<span class=\"token punctuation\">,</span>dart_radius<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case #%d'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\ninf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"slug":"/알고리즘/practice_004/","previous":{"fields":{"slug":"/잡담/블로그_시작/"},"frontmatter":{"title":"블로그 시작"}},"next":{"fields":{"slug":"/알고리즘/practice_003/"},"frontmatter":{"title":""}}}}}